2016-18829 Seongmin Lee / 이성민
ligi214@snu.ac.kr

자료구조의 기초 homework5

1. Compile 방법
'g++ *.cpp'로 컴파일하면 a.out 이라는 실행 파일이 만들어진다.
'./a.out' 을 입력함으로써 프로그램을 실행시킬 수 있다.
컴파일을 하기 위한 Makefile을 이용해, 'make'를 입력해서도 컴파일할 수 있다.

파일을 컴파일 및 실행하기 위한 순서는 다음과 같다.
1) input.txt 입력
2) make를 치거나 g++ *.cpp를 침으로써 컴파일 -> ./a.out 파일 생성
3) ./a.out 을 입력해 프로그램 실행
4) 원하는 문제 번호를 입력하여 답 확인
5) exit을 원할 경우 5를 입력하여 exit


2. Input file
Input graph는 input.txt 파일에 입력한다. 이 때, 입력하는 순서는 pdf에 설명된 것과 같다.
첫 번째 line에는 vertex 개수를,
두 번째 line에는 edge 개수를,
세 번째 line부터는 edge들을 입력한다.
Edge는 weight,start node,end node 순서로 입력한다.
예를 들어, 3,1,2 로 입력이 들어왔다면 vertex#1->vertex#2인 edge가 있으며, 그 weight는 3임을 의미한다.
,와 숫자 사이는 띄어쓰기가 없다.
또한, 마지막 줄에 빈 line이 들어오는 등 정해진 input format을 따르지 않는 경우는 고려하지 않았다.
Undirected graph의 경우, edge (i,j)를 입력하면 자동으로 (j,i) 까지 입력되므로 한 방향만 작성해도 되도록 하였다.


3. Visualization detail
과제에 네 개의 문제가 나왔기 때문에, 프로그램을 시작하면 네 개 중 한 문제를 골라 풀이를 볼 수 있다.
처음에 숫자를 입력하라는 창이 출력되고, 해당 입력란에 5를 입력하면 프로그램이 종료된다. 1, 2, 3, 4 중 하나를 입력하면 input.txt에 입력한 그래프에 대한 해답이 출력되고 다시 첫 화면(입력을 받는 화면)으로 돌아온다.
1,2,3번은 주어진 그래프가 undirected라고 생각하였고 4번은 directed graph로 받아들였다. 4번의 경우 주어진 코드와 최대한 비슷하게 짜기 위해 adjacency matrix 형태로 들어온다고 생각하였으며 나머지는 adjacency list로 구현하였다.

- Question 1. Depth first search (Problem 6.2-3)
Depth first search는 각 vertex마다 discovered time과 finish time을 갖는다. 각각을 d_time, f_time으로 출력하였다. 각 vertex 번호마다 어떤 time을 갖는지와 더불어 predecessor를 출력하도록 하였다. Predecessor는 depth first search를 할 때, 해당 vertex에 오기 바로 직전에 어느 vertex에서 비롯되었는지를 말한다. 이를 참고함으로써 depth first tree의 형태를 파악할 수 있다.
예를 들어, vertex 2의 predecessor가 vertex 5이고, vertex 5의 predecessor가 vertex 0, vertex 0의 predecessor가 NIL이라면, 0-5-2 순서대로 depth first search가 이루어졌으며, 그 순서대로 depth first tree에 연결되어 있음을 알 수 있다. 문제에서 준 조건과 같이 edge의 정보는 adjacency list 형태로 들어온다고 가정하였다. 이 문제에서는 입력된 weight는 아무런 영향을 미치지 않는다.
Search algorithm은 시작된 위치와는 무관하게 모든 vertex를 search하는 데 의의를 두기 때문에, 무조건 0번 vertex부터 search하도록 하였고, 그 후 숫자 오름차순으로 search root를 바꾸었다. 즉, 0번 vertex와 connect 되어 있는 vertices들을 모두 search하고, 혹시 0번 vertex에 대해 search하였을 때 연결되지 않아 남은 vertex가 있다면 그러한 vertex들에 대해 새롭게 depth first search를 시행하였다.

- Question 2. Breadth first search (Problem 6.2-5)
Breadth first search는 각 vertex마다 search를 시작한 source로부터의 거리 값을 갖고 있다. 이를 d로 각 vertex마다 출력하도록 하였다. 그와 더불어, predecessor 정보를 보여주어 breadth first tree의 구조를 파악할 수 있도록 하였다. Predecessor는 어느 vertex에 대해 search를 할 때, 해당 vertex에 도달하였는지를 말해준다. 즉, breadth first tree의 parent vertex라고 생각할 수 있겠다. Breadth first search의 과정(혹은 breadth first tree의 구조)는 depth first search에서 설명된 것과 유사하게 구할 수 있다.
문제에서 준 조건과 같이 edge의 정보는 adjacency list 형태로 들어온다고 가정하였다. 이 문제에서는 입력된 weight는 아무런 영향을 미치지 않는다.
BFS의 경우, 주어진 instruction에 맞추어 source를 input으로 받은 뒤, 그 source와 connect 되어 있는 vertices만 처리하였다. Connect 되지 않은 점들은 출력 시, d=-1, predecessor=NIL로 출력된다.

- Question 3. Minimum spanning tree (Problem 6.3-3)
Minimum spanning tree 문제는 undirected graph가 들어온다고 가정하였다. 일반적인 prim algorithm에서는 tree를 구성하기 시작하는 source vertex를 input으로 받기도 하지만, 문제에서 주어진 코드에서는 0번이라고 정해져 있기 때문에 input으로 받지 않았다.
이를 풀 때에는 각 vertex마다 TV에 add될 때 갖고 있던 key 값을 갖고 있으므로, 이를 출력하도록 하였다. 또한, predecessor도 함께 출력함으로써 minimum spanning tree가 어떻게 생겼는지를 파악 가능하다. Vertex u에 대한 predecessor가 v라면 edge (u,v)가 minimum spanning tree를 구성한다고 생각할 수 있다. Source vertex에 대해서는 NIL을 출력하도록 하였다. 예를 들어, vertex 1의 predecessor가 vertex 0이고, vertex 1의 key=4라면, edge (0, 1)이 minimum spanning tree에 속하며 weight=4를 가짐을 뜻한다.
마지막에는 total key를 출력하여 minimum spanning tree의 weight 합을 보여주었다.
만일, spanning tree가 없다면, 즉 connected 되지 않은 input이 들어왔다면 spanning tree가 존재하지 않는다는 메시지를 띄웠다. Spanning tree가 없기 때문에 중간 과정을 굳이 출력하는 것은 무의미하다고 판단하여 존재하지 않는다는 에러 메시지만 띄우고 넘어가게 된다.

- Question 4. Single source shortest path (Problem 6.4-8)
이 문제에서는 directed graph가 들어옴을 가정하였으며, 문제에서 제시된 알고리즘에 맞추기 위해 adjacency matrix가 들어온다고 생각하였다. Matrix는 edge (i,j) with weight w에 대해, matrix의 i행 j열에 w라는 값을 넣어주었다. Edge가 없는 pair에 대해서는 Infinity(INT_MAX) 값을 넣어주었다.
어떤 source에 대해 각 vertex까지 가는 shortest path와 그 path의 length를 출력하는 문제이다.
우선, 4번 문제에 들어오기 되면 source를 입력하는 창이 뜬다. 해당 입력으로 source vertex 번호를 주면, 그를 source로 한 shortest path와 그 path의 weight가 각 vertex 별로 출력된다. Source vertex는 해당 vertex가 source임을 출력하였고, reachable하지 않은 vertex는 path가 없다는 메시지를 출력하였다.
나머지 reachable한 vertex에 대해서는 source부터 그 vertex까지 가는 최단 경로와 거리를 출력하였다.

- 5를 입력하면 종료가 되며, 1~5 외의 입력을 주면 잘못된 입력이 들어왔다는 에러 메시지가 뜬다.